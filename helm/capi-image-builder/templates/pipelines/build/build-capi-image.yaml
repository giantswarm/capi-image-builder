---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-capi-image
spec:
  params:
  - name: k8sVersion
  workspaces:
  - name: output-ws
  {{ if .Values.output.s3.enabled }}
  - name: secrets
  {{ end }}
  tasks:
    - name: build-capi-image
      timeout: 6h
      taskRef:
        name: build-capi-image
      params:
        - name: ACCELERATOR
          value: 'none'
        - name: KUBERNETES_VERSION
          value: $(params.k8sVersion)
        - name: PACKER_LOG
          value: '1'
        - name: build-image
          value: "{{.Values.image.registry}}/{{.Values.image.name}}:{{.Values.image.tag}}"
        - name: CPUS
          value: '2'
        - name: MEMORY
          value: '4096'
        - name: make-target
          value: "{{ include "makeTarget" $ }}"
          
      workspaces:
      - name: output
        workspace: output-ws

    {{ if .Values.output.s3.enabled }}
    - name: s3-upload-image
      runAfter:
      - build-capi-image
      workspaces:
      - name: secrets
        workspace: secrets
      - name: source
        workspace: output-ws
      taskSpec:
        workspaces:
        - name: secrets
          mountPath: /root/.aws
        - name: source
        params:
          - name: SCRIPT
            value: |
              set -x
              files=($(find $(workspaces.source.path)))
              for file in "${files[@]}"; do
                aws s3 $(cat /root/.aws/cli-params) cp ${file} s3://$(cat /root/.aws/bucket-name)/
              done
        steps:
          - name: get-s3-existing-image
            image: docker.io/amazon/aws-cli:2.0.52@sha256:1506cec98a7101c935176d440a14302ea528b8f92fcaf4a6f1ea2d7ecef7edc4 #tag: 2.0.52
            script: "$(params.SCRIPT)"
    {{ else if .Values.output.gcp.enabled }}
    {{ else if .Values.output.openstackGlance.enabled }}
    {{ end }}
